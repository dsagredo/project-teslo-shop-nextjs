// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Size {
    XS
    S
    M
    L
    XL
    XXL
}

enum Gender {
    men
    women
    kid
    unisex
}

enum Role {
    admin
    user
}

model Category {
    id      String    @id @default(uuid())
    name    String    @unique
    Product Product[]
}

model Product {
    id          String   @id @default(uuid())
    title       String
    description String
    inStock     Int
    price       Float    @default(0)
    slug        String   @unique
    sizes       Size[]   @default([])
    gender      Gender
    tags        String[] @default([])

    category     Category       @relation(fields: [categoryId], references: [id])
    categoryId   String
    ProductImage ProductImage[]
    OrderItem    OrderItem[]

    @@index([gender])
}

model ProductImage {
    id        Int     @id @default(autoincrement())
    url       String
    product   Product @relation(fields: [productId], references: [id])
    productId String
}

model User {
    id            String    @id @default(uuid())
    name          String
    email         String    @unique
    emailVerified DateTime?
    password      String
    role          Role      @default(user)
    image         String?
    address       Address?
    Order         Order[]
}

model Country {
    id           String         @id
    name         String
    address      Address[]
    OrderAddress OrderAddress[]
}

model Address {
    id              String  @id @default(uuid())
    firstName       String
    lastName        String
    address         String
    addressOptional String?
    postalCode      String
    phone           String
    city            String
    country         Country @relation(fields: [countryId], references: [id])
    countryId       String
    user            User    @relation(fields: [userId], references: [id])
    userId          String  @unique
}

model Order {
    id            String        @id @default(uuid())
    subTotal      Float
    tax           Float
    total         Float
    itemsInOrder  Int
    isPaid        Boolean       @default(false)
    paidAt        DateTime?
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    user          User          @relation(fields: [userId], references: [id])
    userId        String
    OrderItem     OrderItem[]
    OrderAddress  OrderAddress?
    transactionId String?
}

model OrderItem {
    id        String  @id @default(uuid())
    quantity  Int
    price     Float
    size      Size
    order     Order   @relation(fields: [orderId], references: [id])
    orderId   String
    product   Product @relation(fields: [productId], references: [id])
    productId String
}

model OrderAddress {
    id              String  @id @default(uuid())
    firstName       String
    lastName        String
    address         String
    addressOptional String?
    postalCode      String
    city            String
    phone           String
    country         Country @relation(fields: [countryId], references: [id])
    countryId       String
    Order           Order   @relation(fields: [orderId], references: [id])
    orderId         String  @unique
}
